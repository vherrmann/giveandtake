// additional api endpoints that can't be autogenerated by the OpenAPI generator

import * as auto from "./autogen";
import { DefaultApi } from "./autogen/apis/DefaultApi";
import * as runtime from "./autogen/runtime";
export * from "./autogen";

export interface ApiMediaUploadPostRRequest {
    body: FileList;
}

export interface ApiMediaIdGetRequest {
    id: string;
}

export class Api extends DefaultApi {
    constructor(
        protected configuration: runtime.Configuration = runtime.DefaultConfig,
    ) {
        const newConfigParams: runtime.ConfigurationParameters = {
            ...configuration["configuration"],
            basePath: window.location.origin,
        };
        const newConfiguration = new runtime.Configuration(newConfigParams);
        super(newConfiguration);
        this.configuration = newConfiguration;
    }

    /**
     * @deprecated The method should not be used
     */
    async apiMediaUploadPost(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<string> {
        throw new Error(
            "The method should not be used. Use apiMediaUploadPostR instead.",
        );
    }

    /**
     * @deprecated The method should not be used
     */
    async apiMediaId(
        _initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<auto.UploadMediaResponse> {
        throw new Error(
            "The method should not be used. Use apiMediaIdR instead.",
        );
    }

    async apiMediaUploadPostRRaw(
        requestParameters: ApiMediaUploadPostRRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<string>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError(
                "body",
                'Required parameter "body" was null or undefined when calling apiMediaUploadPostR().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const fileList = requestParameters["body"];
        var formData = new FormData();
        for (let i = 0; i < fileList.length; i++) {
            formData.append(`file${i + 1}`, fileList[i]);
        }

        const response = await this.request(
            {
                path: `/api/media/upload`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: formData,
            },
            initOverrides,
        );

        // return new runtime.JSONApiResponse(response, (jsonValue) =>
        //     auto.UploadMediaResponseFromJSON(jsonValue),
        // );
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    async apiMediaUploadPostR(
        requestParameters: ApiMediaUploadPostRRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<string> {
        const response = await this.apiMediaUploadPostRRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    async apiMediaIdGet(
        requestParameters: ApiMediaIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<File> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling apiMediaIdR().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/media/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        const blob = await response.blob();
        const mimeType = response.headers.get("content-type");
        if (mimeType === null) {
            throw new runtime.ResponseError(
                response,
                "The response did not include a content-type header.",
            );
        }
        return new File([blob], requestParameters.id, { type: mimeType });
    }
}
