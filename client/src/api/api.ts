// additional api endpoints that can't be autogenerated by the OpenAPI generator

import { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
import * as auto from "./autogen";
import * as autob from "./autogen/base";
import * as autoc from "./autogen/common";
export * from "./autogen";

export interface UploadMedia {
    files: FileList;
}

export const Api = () => {
    const basePath = window.location.origin;
    const configuration = new auto.Configuration({
        basePath,
    });

    const apiMediaUploadPostArgs = async (
        uploadMedia: UploadMedia,
        options: RawAxiosRequestConfig = {},
    ): Promise<autob.RequestArgs> => {
        // verify required parameter 'uploadMedia' is not null or undefined
        autoc.assertParamExists(
            "apiMediaUploadPostArgs",
            "uploadMedia",
            uploadMedia,
        );
        const localVarPath = `/api/media/upload`;
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, autoc.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
            baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
            method: "POST",
            ...baseOptions,
            ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        localVarHeaderParameter["Content-Type"] = "multipart/form-data";

        // authentication Cookie required
        // http bearer authentication required
        await autoc.setBearerAuthToObject(
            localVarHeaderParameter,
            configuration,
        );

        //  We don't set the content type ourself.

        autoc.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
            baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...headersFromBaseOptions,
            ...options.headers,
        };

        // add request data
        const fileList = uploadMedia.files;
        var formData = new FormData();
        for (let i = 0; i < fileList.length; i++) {
            formData.append(`file${i + 1}`, fileList[i]);
        }
        localVarRequestOptions.data = autoc.serializeDataIfNeeded(
            formData,
            localVarRequestOptions,
            configuration,
        );

        return {
            url: autoc.toPathString(localVarUrlObj),
            options: localVarRequestOptions,
        };
    };

    const apiMediaUploadPostFp = async (
        uploadMedia: UploadMedia,
        options?: RawAxiosRequestConfig,
    ): Promise<
        (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > => {
        const localVarAxiosArgs = await apiMediaUploadPostArgs(
            uploadMedia,
            options,
        );
        const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
        const localVarOperationServerBasePath =
            autob.operationServerMap["DefaultApi.apiMediaUploadPost"]?.[
                localVarOperationServerIndex
            ]?.url;
        return (axios, basePath) =>
            autoc.createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                autob.BASE_PATH,
                configuration,
            )(axios, localVarOperationServerBasePath || basePath);
    };

    const apiMediaUploadPost = async (
        requestParameters: { uploadMedia: UploadMedia },
        options?: any,
    ): AxiosPromise<string> => {
        return apiMediaUploadPostFp(
            requestParameters.uploadMedia,
            options,
        ).then((request) => request(undefined, basePath));
    };

    const apiMediaIdGetArgs = async (
        id: string,
        options: RawAxiosRequestConfig = {},
    ): Promise<autob.RequestArgs> => {
        // verify required parameter 'id' is not null or undefined
        autoc.assertParamExists("apiMediaIdGetArgs", "id", id);
        const localVarPath = `/api/media/{id}`.replace(
            `{${"id"}}`,
            encodeURIComponent(String(id)),
        );
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, autoc.DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
            baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {
            method: "GET",
            responseType: "blob", // important
            ...baseOptions,
            ...options,
        };
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication Cookie required
        // http bearer authentication required
        await autoc.setBearerAuthToObject(
            localVarHeaderParameter,
            configuration,
        );

        autoc.setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions =
            baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...headersFromBaseOptions,
            ...options.headers,
        };

        return {
            url: autoc.toPathString(localVarUrlObj),
            options: localVarRequestOptions,
        };
    };

    const apiMediaIdGetFp = async (
        id: string,
        options?: RawAxiosRequestConfig,
    ): Promise<
        (axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>
    > => {
        const localVarAxiosArgs = await apiMediaIdGetArgs(id, options);
        const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
        const localVarOperationServerBasePath =
            autob.operationServerMap["DefaultApi.apiMediaIdGet"]?.[
                localVarOperationServerIndex
            ]?.url;
        return (axios, basePath) =>
            autoc.createRequestFunction(
                localVarAxiosArgs,
                globalAxios,
                autob.BASE_PATH,
                configuration,
            )(axios, localVarOperationServerBasePath || basePath);
    };

    const apiMediaIdGet = async (
        requestParameters: { id: string },
        options?: any,
    ): AxiosPromise<File> => {
        return apiMediaIdGetFp(requestParameters.id, options).then((request) =>
            request(undefined, basePath),
        );
    };

    return {
        ...auto.DefaultApiFactory(configuration, basePath),
        apiMediaUploadPost,
        apiMediaIdGet,
    };
};
