/* tslint:disable */
/* eslint-disable */
/**
 * GiveAndTake API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiGroup
 */
export interface ApiGroup {
    /**
     * 
     * @type {Group}
     * @memberof ApiGroup
     */
    'group': Group;
    /**
     * 
     * @type {Array<WithUUIDApiGroupMember>}
     * @memberof ApiGroup
     */
    'members': Array<WithUUIDApiGroupMember>;
}
/**
 * 
 * @export
 * @interface ApiGroupMember
 */
export interface ApiGroupMember {
    /**
     * 
     * @type {GroupRole}
     * @memberof ApiGroupMember
     */
    'role': GroupRole;
    /**
     * 
     * @type {UserPublic}
     * @memberof ApiGroupMember
     */
    'user': UserPublic;
}


/**
 * @type ApiPost
 * @export
 */
export type ApiPost = HiddenPost | UnhiddenPost;

/**
 * 
 * @export
 * @interface ChangeGroupRole
 */
export interface ChangeGroupRole {
    /**
     * 
     * @type {string}
     * @memberof ChangeGroupRole
     */
    'group': string;
    /**
     * 
     * @type {GroupRole}
     * @memberof ChangeGroupRole
     */
    'role': GroupRole;
    /**
     * 
     * @type {string}
     * @memberof ChangeGroupRole
     */
    'user': string;
}


/**
 * 
 * @export
 * @interface CheckResponse
 */
export interface CheckResponse {
    /**
     * 
     * @type {User}
     * @memberof CheckResponse
     */
    'user': User;
    /**
     * 
     * @type {string}
     * @memberof CheckResponse
     */
    'userId': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const FeedType = {
    MainFeed: 'MainFeed'
} as const;

export type FeedType = typeof FeedType[keyof typeof FeedType];


/**
 * 
 * @export
 * @interface FeedUrlPostResponse
 */
export interface FeedUrlPostResponse {
    /**
     * 
     * @type {string}
     * @memberof FeedUrlPostResponse
     */
    'feedUrl': string;
}
/**
 * 
 * @export
 * @interface FriendsRequestGetResponse
 */
export interface FriendsRequestGetResponse {
    /**
     * 
     * @type {Array<WithUUIDUserPublic>}
     * @memberof FriendsRequestGetResponse
     */
    'requestsFromYou': Array<WithUUIDUserPublic>;
    /**
     * 
     * @type {Array<WithUUIDUserPublic>}
     * @memberof FriendsRequestGetResponse
     */
    'requestsToYou': Array<WithUUIDUserPublic>;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'owner': string;
}
/**
 * 
 * @export
 * @interface GroupPublic
 */
export interface GroupPublic {
    /**
     * 
     * @type {string}
     * @memberof GroupPublic
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof GroupPublic
     */
    'name': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const GroupRole = {
    GroupRoleNoRole: 'GroupRoleNoRole',
    GroupRoleAdmin: 'GroupRoleAdmin'
} as const;

export type GroupRole = typeof GroupRole[keyof typeof GroupRole];


/**
 * 
 * @export
 * @interface HiddenPost
 */
export interface HiddenPost {
    /**
     * 
     * @type {HiddenPostData}
     * @memberof HiddenPost
     */
    'contents': HiddenPostData;
    /**
     * 
     * @type {string}
     * @memberof HiddenPost
     */
    'tag': HiddenPostTagEnum;
}

export const HiddenPostTagEnum = {
    HiddenPost: 'HiddenPost'
} as const;

export type HiddenPostTagEnum = typeof HiddenPostTagEnum[keyof typeof HiddenPostTagEnum];

/**
 * @type HiddenPostData
 * @export
 */
export type HiddenPostData = LockedHiddenPost | UnlockedHiddenPost;

/**
 * 
 * @export
 * @enum {string}
 */

export const JobStatus = {
    JobPending: 'JobPending',
    JobRunning: 'JobRunning',
    JobFinished: 'JobFinished',
    JobFailed: 'JobFailed'
} as const;

export type JobStatus = typeof JobStatus[keyof typeof JobStatus];


/**
 * 
 * @export
 * @interface LockedHiddenPost
 */
export interface LockedHiddenPost {
    /**
     * 
     * @type {LockedHiddenPostData}
     * @memberof LockedHiddenPost
     */
    'contents': LockedHiddenPostData;
    /**
     * 
     * @type {string}
     * @memberof LockedHiddenPost
     */
    'tag': LockedHiddenPostTagEnum;
}

export const LockedHiddenPostTagEnum = {
    LockedHiddenPost: 'LockedHiddenPost'
} as const;

export type LockedHiddenPostTagEnum = typeof LockedHiddenPostTagEnum[keyof typeof LockedHiddenPostTagEnum];

/**
 * 
 * @export
 * @interface LockedHiddenPostData
 */
export interface LockedHiddenPostData {
    /**
     * 
     * @type {string}
     * @memberof LockedHiddenPostData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof LockedHiddenPostData
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof LockedHiddenPostData
     */
    'user': string;
}
/**
 * 
 * @export
 * @interface LoginData
 */
export interface LoginData {
    /**
     * 
     * @type {string}
     * @memberof LoginData
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginData
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface NewGroup
 */
export interface NewGroup {
    /**
     * 
     * @type {string}
     * @memberof NewGroup
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface NewPost
 */
export interface NewPost {
    /**
     * 
     * @type {string}
     * @memberof NewPost
     */
    'body': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NewPost
     */
    'media': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof NewPost
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface NotifContent
 */
export interface NotifContent {
    /**
     * 
     * @type {string}
     * @memberof NotifContent
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof NotifContent
     */
    'url': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const NotifPrio = {
    NpLow: 'NPLow',
    NpMedium: 'NPMedium',
    NpHigh: 'NPHigh'
} as const;

export type NotifPrio = typeof NotifPrio[keyof typeof NotifPrio];


/**
 * 
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {NotifContent}
     * @memberof Notification
     */
    'content': NotifContent;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'createdAt': string;
    /**
     * 
     * @type {NotifPrio}
     * @memberof Notification
     */
    'prio': NotifPrio;
    /**
     * 
     * @type {boolean}
     * @memberof Notification
     */
    'read': boolean;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'user': string;
}


/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'body': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'createdAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof Post
     */
    'deleted': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Post
     */
    'media': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'user': string;
}
/**
 * 
 * @export
 * @interface SignupData
 */
export interface SignupData {
    /**
     * 
     * @type {string}
     * @memberof SignupData
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignupData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SignupData
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SignupData
     */
    'secret': string;
}
/**
 * 
 * @export
 * @interface SuccessLoginResponse
 */
export interface SuccessLoginResponse {
    /**
     * 
     * @type {User}
     * @memberof SuccessLoginResponse
     */
    'user': User;
    /**
     * 
     * @type {string}
     * @memberof SuccessLoginResponse
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface UnhiddenPost
 */
export interface UnhiddenPost {
    /**
     * 
     * @type {UnhiddenPostData}
     * @memberof UnhiddenPost
     */
    'contents': UnhiddenPostData;
    /**
     * 
     * @type {string}
     * @memberof UnhiddenPost
     */
    'tag': UnhiddenPostTagEnum;
}

export const UnhiddenPostTagEnum = {
    UnhiddenPost: 'UnhiddenPost'
} as const;

export type UnhiddenPostTagEnum = typeof UnhiddenPostTagEnum[keyof typeof UnhiddenPostTagEnum];

/**
 * 
 * @export
 * @interface UnhiddenPostData
 */
export interface UnhiddenPostData {
    /**
     * 
     * @type {Post}
     * @memberof UnhiddenPostData
     */
    'post': Post;
    /**
     * 
     * @type {Array<WithUUIDPost>}
     * @memberof UnhiddenPostData
     */
    'usedToUnlock': Array<WithUUIDPost>;
}
/**
 * 
 * @export
 * @interface UnlockedHiddenPost
 */
export interface UnlockedHiddenPost {
    /**
     * 
     * @type {UnlockedHiddenPostData}
     * @memberof UnlockedHiddenPost
     */
    'contents': UnlockedHiddenPostData;
    /**
     * 
     * @type {string}
     * @memberof UnlockedHiddenPost
     */
    'tag': UnlockedHiddenPostTagEnum;
}

export const UnlockedHiddenPostTagEnum = {
    UnlockedHiddenPost: 'UnlockedHiddenPost'
} as const;

export type UnlockedHiddenPostTagEnum = typeof UnlockedHiddenPostTagEnum[keyof typeof UnlockedHiddenPostTagEnum];

/**
 * 
 * @export
 * @interface UnlockedHiddenPostData
 */
export interface UnlockedHiddenPostData {
    /**
     * 
     * @type {Post}
     * @memberof UnlockedHiddenPostData
     */
    'post': Post;
    /**
     * 
     * @type {WithUUIDPost}
     * @memberof UnlockedHiddenPostData
     */
    'unlockedWithPost': WithUUIDPost;
}
/**
 * 
 * @export
 * @interface UploadMediaResponse
 */
export interface UploadMediaResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof UploadMediaResponse
     */
    'mediaIds': Array<string>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'fullyAuthenticated': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'passwordHash': string;
}
/**
 * 
 * @export
 * @interface UserPublic
 */
export interface UserPublic {
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface VerifyEmail
 */
export interface VerifyEmail {
    /**
     * 
     * @type {string}
     * @memberof VerifyEmail
     */
    'secret': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyEmail
     */
    'user': string;
}
/**
 * 
 * @export
 * @interface WithUUIDApiGroupMember
 */
export interface WithUUIDApiGroupMember {
    /**
     * 
     * @type {string}
     * @memberof WithUUIDApiGroupMember
     */
    'key': string;
    /**
     * 
     * @type {ApiGroupMember}
     * @memberof WithUUIDApiGroupMember
     */
    'value': ApiGroupMember;
}
/**
 * 
 * @export
 * @interface WithUUIDApiPost
 */
export interface WithUUIDApiPost {
    /**
     * 
     * @type {string}
     * @memberof WithUUIDApiPost
     */
    'key': string;
    /**
     * 
     * @type {ApiPost}
     * @memberof WithUUIDApiPost
     */
    'value': ApiPost;
}
/**
 * 
 * @export
 * @interface WithUUIDGroup
 */
export interface WithUUIDGroup {
    /**
     * 
     * @type {string}
     * @memberof WithUUIDGroup
     */
    'key': string;
    /**
     * 
     * @type {Group}
     * @memberof WithUUIDGroup
     */
    'value': Group;
}
/**
 * 
 * @export
 * @interface WithUUIDNotification
 */
export interface WithUUIDNotification {
    /**
     * 
     * @type {string}
     * @memberof WithUUIDNotification
     */
    'key': string;
    /**
     * 
     * @type {Notification}
     * @memberof WithUUIDNotification
     */
    'value': Notification;
}
/**
 * 
 * @export
 * @interface WithUUIDPost
 */
export interface WithUUIDPost {
    /**
     * 
     * @type {string}
     * @memberof WithUUIDPost
     */
    'key': string;
    /**
     * 
     * @type {Post}
     * @memberof WithUUIDPost
     */
    'value': Post;
}
/**
 * 
 * @export
 * @interface WithUUIDUserPublic
 */
export interface WithUUIDUserPublic {
    /**
     * 
     * @type {string}
     * @memberof WithUUIDUserPublic
     */
    'key': string;
    /**
     * 
     * @type {UserPublic}
     * @memberof WithUUIDUserPublic
     */
    'value': UserPublic;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginData} loginData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (loginData: LoginData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginData' is not null or undefined
            assertParamExists('apiAuthLoginPost', 'loginData', loginData)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignupData} signupData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSignupPost: async (signupData: SignupData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupData' is not null or undefined
            assertParamExists('apiAuthSignupPost', 'signupData', signupData)
            const localVarPath = `/api/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyEmail} verifyEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthVerifyemailPost: async (verifyEmail: VerifyEmail, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmail' is not null or undefined
            assertParamExists('apiAuthVerifyemailPost', 'verifyEmail', verifyEmail)
            const localVarPath = `/api/auth/verifyemail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmail, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} token 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFeedIdTokenGet: async (id: string, token: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFeedIdTokenGet', 'id', id)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('apiFeedIdTokenGet', 'token', token)
            const localVarPath = `/api/feed/{id}/{token}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFeedUrlPost: async (body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiFeedUrlPost', 'body', body)
            const localVarPath = `/api/feed/url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsFriendIdDelete: async (friendId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('apiFriendsFriendIdDelete', 'friendId', friendId)
            const localVarPath = `/api/friends/{friendId}`
                .replace(`{${"friendId"}}`, encodeURIComponent(String(friendId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/friends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsRequestFriendIdAcceptPost: async (friendId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('apiFriendsRequestFriendIdAcceptPost', 'friendId', friendId)
            const localVarPath = `/api/friends/request/{friendId}/accept`
                .replace(`{${"friendId"}}`, encodeURIComponent(String(friendId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsRequestFriendIdCancelPost: async (friendId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('apiFriendsRequestFriendIdCancelPost', 'friendId', friendId)
            const localVarPath = `/api/friends/request/{friendId}/cancel`
                .replace(`{${"friendId"}}`, encodeURIComponent(String(friendId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsRequestFriendIdPost: async (friendId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('apiFriendsRequestFriendIdPost', 'friendId', friendId)
            const localVarPath = `/api/friends/request/{friendId}`
                .replace(`{${"friendId"}}`, encodeURIComponent(String(friendId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsRequestFriendIdRejectPost: async (friendId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('apiFriendsRequestFriendIdRejectPost', 'friendId', friendId)
            const localVarPath = `/api/friends/request/{friendId}/reject`
                .replace(`{${"friendId"}}`, encodeURIComponent(String(friendId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsRequestGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/friends/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupsIdDelete', 'id', id)
            const localVarPath = `/api/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupsIdGet', 'id', id)
            const localVarPath = `/api/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsIdPublicGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupsIdPublicGet', 'id', id)
            const localVarPath = `/api/groups/{id}/public`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsMemberIdAddUserIdPost: async (id: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupsMemberIdAddUserIdPost', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiGroupsMemberIdAddUserIdPost', 'userId', userId)
            const localVarPath = `/api/groups/member/{id}/add/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsMemberIdRemoveUserIdDelete: async (id: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupsMemberIdRemoveUserIdDelete', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiGroupsMemberIdRemoveUserIdDelete', 'userId', userId)
            const localVarPath = `/api/groups/member/{id}/remove/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewGroup} newGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsPost: async (newGroup: NewGroup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newGroup' is not null or undefined
            assertParamExists('apiGroupsPost', 'newGroup', newGroup)
            const localVarPath = `/api/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/groups/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestIdCancelPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupsRequestIdCancelPost', 'id', id)
            const localVarPath = `/api/groups/request/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupsRequestIdGet', 'id', id)
            const localVarPath = `/api/groups/request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestIdPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupsRequestIdPost', 'id', id)
            const localVarPath = `/api/groups/request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestIdUserIdAcceptPost: async (id: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupsRequestIdUserIdAcceptPost', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiGroupsRequestIdUserIdAcceptPost', 'userId', userId)
            const localVarPath = `/api/groups/request/{id}/{userId}/accept`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestIdUserIdRejectPost: async (id: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupsRequestIdUserIdRejectPost', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiGroupsRequestIdUserIdRejectPost', 'userId', userId)
            const localVarPath = `/api/groups/request/{id}/{userId}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangeGroupRole} changeGroupRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRolesPost: async (changeGroupRole: ChangeGroupRole, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeGroupRole' is not null or undefined
            assertParamExists('apiGroupsRolesPost', 'changeGroupRole', changeGroupRole)
            const localVarPath = `/api/groups/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeGroupRole, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobIdResultMediaCompressGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobIdResultMediaCompressGet', 'id', id)
            const localVarPath = `/api/job/{id}/result/mediaCompress`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobIdResultVerifyEmailGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobIdResultVerifyEmailGet', 'id', id)
            const localVarPath = `/api/job/{id}/result/verifyEmail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobIdStatusGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobIdStatusGet', 'id', id)
            const localVarPath = `/api/job/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaUploadPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/media/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotifGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notif`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotifReadPost: async (requestBody: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('apiNotifReadPost', 'requestBody', requestBody)
            const localVarPath = `/api/notif/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsFeedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/posts/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPostsIdDelete', 'id', id)
            const localVarPath = `/api/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPostsIdGet', 'id', id)
            const localVarPath = `/api/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPost} newPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsPost: async (newPost: NewPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newPost' is not null or undefined
            assertParamExists('apiPostsPost', 'newPost', newPost)
            const localVarPath = `/api/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} withPost 
         * @param {string} forPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsTradeWithPostForPostPost: async (withPost: string, forPost: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'withPost' is not null or undefined
            assertParamExists('apiPostsTradeWithPostForPostPost', 'withPost', withPost)
            // verify required parameter 'forPost' is not null or undefined
            assertParamExists('apiPostsTradeWithPostForPostPost', 'forPost', forPost)
            const localVarPath = `/api/posts/trade/{withPost}/{forPost}`
                .replace(`{${"withPost"}}`, encodeURIComponent(String(withPost)))
                .replace(`{${"forPost"}}`, encodeURIComponent(String(forPost)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsTradeablesUserGet: async (user: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('apiPostsTradeablesUserGet', 'user', user)
            const localVarPath = `/api/posts/tradeables/{user}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdGet', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdPostsGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdPostsGet', 'id', id)
            const localVarPath = `/api/users/{id}/posts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Cookie required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiAuthCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginData} loginData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(loginData: LoginData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(loginData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiAuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SignupData} signupData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthSignupPost(signupData: SignupData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthSignupPost(signupData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiAuthSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {VerifyEmail} verifyEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthVerifyemailPost(verifyEmail: VerifyEmail, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthVerifyemailPost(verifyEmail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiAuthVerifyemailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} token 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFeedIdTokenGet(id: string, token: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFeedIdTokenGet(id, token, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiFeedIdTokenGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFeedUrlPost(body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedUrlPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFeedUrlPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiFeedUrlPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsFriendIdDelete(friendId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsFriendIdDelete(friendId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiFriendsFriendIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WithUUIDUserPublic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiFriendsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsRequestFriendIdAcceptPost(friendId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsRequestFriendIdAcceptPost(friendId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiFriendsRequestFriendIdAcceptPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsRequestFriendIdCancelPost(friendId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsRequestFriendIdCancelPost(friendId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiFriendsRequestFriendIdCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsRequestFriendIdPost(friendId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsRequestFriendIdPost(friendId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiFriendsRequestFriendIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsRequestFriendIdRejectPost(friendId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsRequestFriendIdRejectPost(friendId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiFriendsRequestFriendIdRejectPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsRequestGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FriendsRequestGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsRequestGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiFriendsRequestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WithUUIDGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsIdPublicGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsIdPublicGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsIdPublicGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsMemberIdAddUserIdPost(id: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsMemberIdAddUserIdPost(id, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsMemberIdAddUserIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsMemberIdRemoveUserIdDelete(id: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsMemberIdRemoveUserIdDelete(id, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsMemberIdRemoveUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {NewGroup} newGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsPost(newGroup: NewGroup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsPost(newGroup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsRequestGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsRequestGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsRequestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsRequestIdCancelPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsRequestIdCancelPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsRequestIdCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsRequestIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WithUUIDUserPublic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsRequestIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsRequestIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsRequestIdPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsRequestIdPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsRequestIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsRequestIdUserIdAcceptPost(id: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsRequestIdUserIdAcceptPost(id, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsRequestIdUserIdAcceptPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsRequestIdUserIdRejectPost(id: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsRequestIdUserIdRejectPost(id, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsRequestIdUserIdRejectPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ChangeGroupRole} changeGroupRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupsRolesPost(changeGroupRole: ChangeGroupRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupsRolesPost(changeGroupRole, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGroupsRolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobIdResultMediaCompressGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadMediaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobIdResultMediaCompressGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiJobIdResultMediaCompressGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobIdResultVerifyEmailGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobIdResultVerifyEmailGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiJobIdResultVerifyEmailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobIdStatusGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobIdStatusGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiJobIdStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaUploadPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaUploadPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiMediaUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotifGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WithUUIDNotification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNotifGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiNotifGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotifReadPost(requestBody: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNotifReadPost(requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiNotifReadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPostsFeedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WithUUIDApiPost>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPostsFeedGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiPostsFeedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPostsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPostsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiPostsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPostsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiPost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPostsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiPostsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {NewPost} newPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPostsPost(newPost: NewPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPostsPost(newPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiPostsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} withPost 
         * @param {string} forPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPostsTradeWithPostForPostPost(withPost: string, forPost: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPostsTradeWithPostForPostPost(withPost, forPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiPostsTradeWithPostForPostPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPostsTradeablesUserGet(user: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WithUUIDPost>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPostsTradeablesUserGet(user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiPostsTradeablesUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiUsersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdPostsGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WithUUIDApiPost>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdPostsGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiUsersIdPostsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCheckGet(options?: RawAxiosRequestConfig): AxiosPromise<CheckResponse> {
            return localVarFp.apiAuthCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(requestParameters: DefaultApiApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessLoginResponse> {
            return localVarFp.apiAuthLoginPost(requestParameters.loginData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiAuthSignupPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSignupPost(requestParameters: DefaultApiApiAuthSignupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiAuthSignupPost(requestParameters.signupData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiAuthVerifyemailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthVerifyemailPost(requestParameters: DefaultApiApiAuthVerifyemailPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiAuthVerifyemailPost(requestParameters.verifyEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiFeedIdTokenGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFeedIdTokenGet(requestParameters: DefaultApiApiFeedIdTokenGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiFeedIdTokenGet(requestParameters.id, requestParameters.token, requestParameters.accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiFeedUrlPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFeedUrlPost(requestParameters: DefaultApiApiFeedUrlPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedUrlPostResponse> {
            return localVarFp.apiFeedUrlPost(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiFriendsFriendIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsFriendIdDelete(requestParameters: DefaultApiApiFriendsFriendIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiFriendsFriendIdDelete(requestParameters.friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WithUUIDUserPublic>> {
            return localVarFp.apiFriendsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiFriendsRequestFriendIdAcceptPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsRequestFriendIdAcceptPost(requestParameters: DefaultApiApiFriendsRequestFriendIdAcceptPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiFriendsRequestFriendIdAcceptPost(requestParameters.friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiFriendsRequestFriendIdCancelPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsRequestFriendIdCancelPost(requestParameters: DefaultApiApiFriendsRequestFriendIdCancelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiFriendsRequestFriendIdCancelPost(requestParameters.friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiFriendsRequestFriendIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsRequestFriendIdPost(requestParameters: DefaultApiApiFriendsRequestFriendIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiFriendsRequestFriendIdPost(requestParameters.friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiFriendsRequestFriendIdRejectPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsRequestFriendIdRejectPost(requestParameters: DefaultApiApiFriendsRequestFriendIdRejectPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiFriendsRequestFriendIdRejectPost(requestParameters.friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsRequestGet(options?: RawAxiosRequestConfig): AxiosPromise<FriendsRequestGetResponse> {
            return localVarFp.apiFriendsRequestGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WithUUIDGroup>> {
            return localVarFp.apiGroupsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsIdDelete(requestParameters: DefaultApiApiGroupsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiGroupsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsIdGet(requestParameters: DefaultApiApiGroupsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiGroup> {
            return localVarFp.apiGroupsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsIdPublicGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsIdPublicGet(requestParameters: DefaultApiApiGroupsIdPublicGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GroupPublic> {
            return localVarFp.apiGroupsIdPublicGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsMemberIdAddUserIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsMemberIdAddUserIdPost(requestParameters: DefaultApiApiGroupsMemberIdAddUserIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiGroupsMemberIdAddUserIdPost(requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsMemberIdRemoveUserIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsMemberIdRemoveUserIdDelete(requestParameters: DefaultApiApiGroupsMemberIdRemoveUserIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiGroupsMemberIdRemoveUserIdDelete(requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsPost(requestParameters: DefaultApiApiGroupsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiGroupsPost(requestParameters.newGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.apiGroupsRequestGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsRequestIdCancelPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestIdCancelPost(requestParameters: DefaultApiApiGroupsRequestIdCancelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiGroupsRequestIdCancelPost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsRequestIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestIdGet(requestParameters: DefaultApiApiGroupsRequestIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<WithUUIDUserPublic>> {
            return localVarFp.apiGroupsRequestIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsRequestIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestIdPost(requestParameters: DefaultApiApiGroupsRequestIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiGroupsRequestIdPost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsRequestIdUserIdAcceptPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestIdUserIdAcceptPost(requestParameters: DefaultApiApiGroupsRequestIdUserIdAcceptPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiGroupsRequestIdUserIdAcceptPost(requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsRequestIdUserIdRejectPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRequestIdUserIdRejectPost(requestParameters: DefaultApiApiGroupsRequestIdUserIdRejectPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiGroupsRequestIdUserIdRejectPost(requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiGroupsRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupsRolesPost(requestParameters: DefaultApiApiGroupsRolesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiGroupsRolesPost(requestParameters.changeGroupRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiJobIdResultMediaCompressGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobIdResultMediaCompressGet(requestParameters: DefaultApiApiJobIdResultMediaCompressGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadMediaResponse> {
            return localVarFp.apiJobIdResultMediaCompressGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiJobIdResultVerifyEmailGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobIdResultVerifyEmailGet(requestParameters: DefaultApiApiJobIdResultVerifyEmailGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiJobIdResultVerifyEmailGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiJobIdStatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobIdStatusGet(requestParameters: DefaultApiApiJobIdStatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobStatus> {
            return localVarFp.apiJobIdStatusGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaUploadPost(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiMediaUploadPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotifGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WithUUIDNotification>> {
            return localVarFp.apiNotifGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiNotifReadPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotifReadPost(requestParameters: DefaultApiApiNotifReadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiNotifReadPost(requestParameters.requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsFeedGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WithUUIDApiPost>> {
            return localVarFp.apiPostsFeedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiPostsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsIdDelete(requestParameters: DefaultApiApiPostsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiPostsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiPostsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsIdGet(requestParameters: DefaultApiApiPostsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiPost> {
            return localVarFp.apiPostsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiPostsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsPost(requestParameters: DefaultApiApiPostsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiPostsPost(requestParameters.newPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiPostsTradeWithPostForPostPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsTradeWithPostForPostPost(requestParameters: DefaultApiApiPostsTradeWithPostForPostPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiPostsTradeWithPostForPostPost(requestParameters.withPost, requestParameters.forPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiPostsTradeablesUserGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPostsTradeablesUserGet(requestParameters: DefaultApiApiPostsTradeablesUserGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<WithUUIDPost>> {
            return localVarFp.apiPostsTradeablesUserGet(requestParameters.user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiUsersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet(requestParameters: DefaultApiApiUsersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserPublic> {
            return localVarFp.apiUsersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiUsersIdPostsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdPostsGet(requestParameters: DefaultApiApiUsersIdPostsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<WithUUIDApiPost>> {
            return localVarFp.apiUsersIdPostsGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiAuthLoginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiAuthLoginPostRequest
 */
export interface DefaultApiApiAuthLoginPostRequest {
    /**
     * 
     * @type {LoginData}
     * @memberof DefaultApiApiAuthLoginPost
     */
    readonly loginData: LoginData
}

/**
 * Request parameters for apiAuthSignupPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiAuthSignupPostRequest
 */
export interface DefaultApiApiAuthSignupPostRequest {
    /**
     * 
     * @type {SignupData}
     * @memberof DefaultApiApiAuthSignupPost
     */
    readonly signupData: SignupData
}

/**
 * Request parameters for apiAuthVerifyemailPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiAuthVerifyemailPostRequest
 */
export interface DefaultApiApiAuthVerifyemailPostRequest {
    /**
     * 
     * @type {VerifyEmail}
     * @memberof DefaultApiApiAuthVerifyemailPost
     */
    readonly verifyEmail: VerifyEmail
}

/**
 * Request parameters for apiFeedIdTokenGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiFeedIdTokenGetRequest
 */
export interface DefaultApiApiFeedIdTokenGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiFeedIdTokenGet
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiFeedIdTokenGet
     */
    readonly token: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiFeedIdTokenGet
     */
    readonly accept?: string
}

/**
 * Request parameters for apiFeedUrlPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiFeedUrlPostRequest
 */
export interface DefaultApiApiFeedUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiFeedUrlPost
     */
    readonly body: string
}

/**
 * Request parameters for apiFriendsFriendIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiFriendsFriendIdDeleteRequest
 */
export interface DefaultApiApiFriendsFriendIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiFriendsFriendIdDelete
     */
    readonly friendId: string
}

/**
 * Request parameters for apiFriendsRequestFriendIdAcceptPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiFriendsRequestFriendIdAcceptPostRequest
 */
export interface DefaultApiApiFriendsRequestFriendIdAcceptPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiFriendsRequestFriendIdAcceptPost
     */
    readonly friendId: string
}

/**
 * Request parameters for apiFriendsRequestFriendIdCancelPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiFriendsRequestFriendIdCancelPostRequest
 */
export interface DefaultApiApiFriendsRequestFriendIdCancelPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiFriendsRequestFriendIdCancelPost
     */
    readonly friendId: string
}

/**
 * Request parameters for apiFriendsRequestFriendIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiFriendsRequestFriendIdPostRequest
 */
export interface DefaultApiApiFriendsRequestFriendIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiFriendsRequestFriendIdPost
     */
    readonly friendId: string
}

/**
 * Request parameters for apiFriendsRequestFriendIdRejectPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiFriendsRequestFriendIdRejectPostRequest
 */
export interface DefaultApiApiFriendsRequestFriendIdRejectPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiFriendsRequestFriendIdRejectPost
     */
    readonly friendId: string
}

/**
 * Request parameters for apiGroupsIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsIdDeleteRequest
 */
export interface DefaultApiApiGroupsIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiGroupsIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsIdGetRequest
 */
export interface DefaultApiApiGroupsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiGroupsIdPublicGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsIdPublicGetRequest
 */
export interface DefaultApiApiGroupsIdPublicGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsIdPublicGet
     */
    readonly id: string
}

/**
 * Request parameters for apiGroupsMemberIdAddUserIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsMemberIdAddUserIdPostRequest
 */
export interface DefaultApiApiGroupsMemberIdAddUserIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsMemberIdAddUserIdPost
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsMemberIdAddUserIdPost
     */
    readonly userId: string
}

/**
 * Request parameters for apiGroupsMemberIdRemoveUserIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsMemberIdRemoveUserIdDeleteRequest
 */
export interface DefaultApiApiGroupsMemberIdRemoveUserIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsMemberIdRemoveUserIdDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsMemberIdRemoveUserIdDelete
     */
    readonly userId: string
}

/**
 * Request parameters for apiGroupsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsPostRequest
 */
export interface DefaultApiApiGroupsPostRequest {
    /**
     * 
     * @type {NewGroup}
     * @memberof DefaultApiApiGroupsPost
     */
    readonly newGroup: NewGroup
}

/**
 * Request parameters for apiGroupsRequestIdCancelPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsRequestIdCancelPostRequest
 */
export interface DefaultApiApiGroupsRequestIdCancelPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsRequestIdCancelPost
     */
    readonly id: string
}

/**
 * Request parameters for apiGroupsRequestIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsRequestIdGetRequest
 */
export interface DefaultApiApiGroupsRequestIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsRequestIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiGroupsRequestIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsRequestIdPostRequest
 */
export interface DefaultApiApiGroupsRequestIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsRequestIdPost
     */
    readonly id: string
}

/**
 * Request parameters for apiGroupsRequestIdUserIdAcceptPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsRequestIdUserIdAcceptPostRequest
 */
export interface DefaultApiApiGroupsRequestIdUserIdAcceptPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsRequestIdUserIdAcceptPost
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsRequestIdUserIdAcceptPost
     */
    readonly userId: string
}

/**
 * Request parameters for apiGroupsRequestIdUserIdRejectPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsRequestIdUserIdRejectPostRequest
 */
export interface DefaultApiApiGroupsRequestIdUserIdRejectPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsRequestIdUserIdRejectPost
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiGroupsRequestIdUserIdRejectPost
     */
    readonly userId: string
}

/**
 * Request parameters for apiGroupsRolesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiGroupsRolesPostRequest
 */
export interface DefaultApiApiGroupsRolesPostRequest {
    /**
     * 
     * @type {ChangeGroupRole}
     * @memberof DefaultApiApiGroupsRolesPost
     */
    readonly changeGroupRole: ChangeGroupRole
}

/**
 * Request parameters for apiJobIdResultMediaCompressGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiJobIdResultMediaCompressGetRequest
 */
export interface DefaultApiApiJobIdResultMediaCompressGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiJobIdResultMediaCompressGet
     */
    readonly id: string
}

/**
 * Request parameters for apiJobIdResultVerifyEmailGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiJobIdResultVerifyEmailGetRequest
 */
export interface DefaultApiApiJobIdResultVerifyEmailGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiJobIdResultVerifyEmailGet
     */
    readonly id: string
}

/**
 * Request parameters for apiJobIdStatusGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiJobIdStatusGetRequest
 */
export interface DefaultApiApiJobIdStatusGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiJobIdStatusGet
     */
    readonly id: string
}

/**
 * Request parameters for apiNotifReadPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiNotifReadPostRequest
 */
export interface DefaultApiApiNotifReadPostRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof DefaultApiApiNotifReadPost
     */
    readonly requestBody: Array<string>
}

/**
 * Request parameters for apiPostsIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiPostsIdDeleteRequest
 */
export interface DefaultApiApiPostsIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiPostsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiPostsIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiPostsIdGetRequest
 */
export interface DefaultApiApiPostsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiPostsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiPostsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiPostsPostRequest
 */
export interface DefaultApiApiPostsPostRequest {
    /**
     * 
     * @type {NewPost}
     * @memberof DefaultApiApiPostsPost
     */
    readonly newPost: NewPost
}

/**
 * Request parameters for apiPostsTradeWithPostForPostPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiPostsTradeWithPostForPostPostRequest
 */
export interface DefaultApiApiPostsTradeWithPostForPostPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiPostsTradeWithPostForPostPost
     */
    readonly withPost: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiPostsTradeWithPostForPostPost
     */
    readonly forPost: string
}

/**
 * Request parameters for apiPostsTradeablesUserGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiPostsTradeablesUserGetRequest
 */
export interface DefaultApiApiPostsTradeablesUserGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiPostsTradeablesUserGet
     */
    readonly user: string
}

/**
 * Request parameters for apiUsersIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiUsersIdGetRequest
 */
export interface DefaultApiApiUsersIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiUsersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiUsersIdPostsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiUsersIdPostsGetRequest
 */
export interface DefaultApiApiUsersIdPostsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiUsersIdPostsGet
     */
    readonly id: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthCheckGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthLoginPost(requestParameters: DefaultApiApiAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthLoginPost(requestParameters.loginData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthLogoutPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiAuthSignupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthSignupPost(requestParameters: DefaultApiApiAuthSignupPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthSignupPost(requestParameters.signupData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiAuthVerifyemailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthVerifyemailPost(requestParameters: DefaultApiApiAuthVerifyemailPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthVerifyemailPost(requestParameters.verifyEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiFeedIdTokenGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFeedIdTokenGet(requestParameters: DefaultApiApiFeedIdTokenGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiFeedIdTokenGet(requestParameters.id, requestParameters.token, requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiFeedUrlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFeedUrlPost(requestParameters: DefaultApiApiFeedUrlPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiFeedUrlPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiFriendsFriendIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFriendsFriendIdDelete(requestParameters: DefaultApiApiFriendsFriendIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiFriendsFriendIdDelete(requestParameters.friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFriendsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiFriendsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiFriendsRequestFriendIdAcceptPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFriendsRequestFriendIdAcceptPost(requestParameters: DefaultApiApiFriendsRequestFriendIdAcceptPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiFriendsRequestFriendIdAcceptPost(requestParameters.friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiFriendsRequestFriendIdCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFriendsRequestFriendIdCancelPost(requestParameters: DefaultApiApiFriendsRequestFriendIdCancelPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiFriendsRequestFriendIdCancelPost(requestParameters.friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiFriendsRequestFriendIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFriendsRequestFriendIdPost(requestParameters: DefaultApiApiFriendsRequestFriendIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiFriendsRequestFriendIdPost(requestParameters.friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiFriendsRequestFriendIdRejectPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFriendsRequestFriendIdRejectPost(requestParameters: DefaultApiApiFriendsRequestFriendIdRejectPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiFriendsRequestFriendIdRejectPost(requestParameters.friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFriendsRequestGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiFriendsRequestGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsIdDelete(requestParameters: DefaultApiApiGroupsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsIdGet(requestParameters: DefaultApiApiGroupsIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsIdPublicGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsIdPublicGet(requestParameters: DefaultApiApiGroupsIdPublicGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsIdPublicGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsMemberIdAddUserIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsMemberIdAddUserIdPost(requestParameters: DefaultApiApiGroupsMemberIdAddUserIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsMemberIdAddUserIdPost(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsMemberIdRemoveUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsMemberIdRemoveUserIdDelete(requestParameters: DefaultApiApiGroupsMemberIdRemoveUserIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsMemberIdRemoveUserIdDelete(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsPost(requestParameters: DefaultApiApiGroupsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsPost(requestParameters.newGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsRequestGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsRequestGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsRequestIdCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsRequestIdCancelPost(requestParameters: DefaultApiApiGroupsRequestIdCancelPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsRequestIdCancelPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsRequestIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsRequestIdGet(requestParameters: DefaultApiApiGroupsRequestIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsRequestIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsRequestIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsRequestIdPost(requestParameters: DefaultApiApiGroupsRequestIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsRequestIdPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsRequestIdUserIdAcceptPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsRequestIdUserIdAcceptPost(requestParameters: DefaultApiApiGroupsRequestIdUserIdAcceptPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsRequestIdUserIdAcceptPost(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsRequestIdUserIdRejectPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsRequestIdUserIdRejectPost(requestParameters: DefaultApiApiGroupsRequestIdUserIdRejectPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsRequestIdUserIdRejectPost(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiGroupsRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGroupsRolesPost(requestParameters: DefaultApiApiGroupsRolesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGroupsRolesPost(requestParameters.changeGroupRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiJobIdResultMediaCompressGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobIdResultMediaCompressGet(requestParameters: DefaultApiApiJobIdResultMediaCompressGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobIdResultMediaCompressGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiJobIdResultVerifyEmailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobIdResultVerifyEmailGet(requestParameters: DefaultApiApiJobIdResultVerifyEmailGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobIdResultVerifyEmailGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiJobIdStatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobIdStatusGet(requestParameters: DefaultApiApiJobIdStatusGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobIdStatusGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMediaUploadPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiMediaUploadPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiNotifGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiNotifGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiNotifReadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiNotifReadPost(requestParameters: DefaultApiApiNotifReadPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiNotifReadPost(requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPostsFeedGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiPostsFeedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiPostsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPostsIdDelete(requestParameters: DefaultApiApiPostsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiPostsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiPostsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPostsIdGet(requestParameters: DefaultApiApiPostsIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiPostsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiPostsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPostsPost(requestParameters: DefaultApiApiPostsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiPostsPost(requestParameters.newPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiPostsTradeWithPostForPostPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPostsTradeWithPostForPostPost(requestParameters: DefaultApiApiPostsTradeWithPostForPostPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiPostsTradeWithPostForPostPost(requestParameters.withPost, requestParameters.forPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiPostsTradeablesUserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPostsTradeablesUserGet(requestParameters: DefaultApiApiPostsTradeablesUserGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiPostsTradeablesUserGet(requestParameters.user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiUsersIdGet(requestParameters: DefaultApiApiUsersIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiUsersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiUsersIdPostsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiUsersIdPostsGet(requestParameters: DefaultApiApiUsersIdPostsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiUsersIdPostsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



